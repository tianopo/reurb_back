generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// dê um prisma migrate com o nome da nova tabela
model User {
  id                 String          @id @unique @default(uuid())
  createdIn          DateTime        @default(now())
  updated            DateTime        @default(now()) @updatedAt
  // cadastro
  nome               String          @db.VarChar(255)
  email              String          @unique
  senha              String
  acesso             String          @db.VarChar(20)
  token              String
  // acesso funcionário
  cpf                String?         @unique @db.VarChar(14)
  profissao          String?         @db.VarChar(100)
  telefone           String?         @db.VarChar(15)
  // acesso cliente
  rg                 String?         @unique @db.VarChar(12)
  estadoCivil        String?         @db.VarChar(25)
  cep                String?         @db.VarChar(20)
  tiposDeContrato    String?         @db.VarChar(20)
  rua                String?         @db.VarChar(255)
  numero             String?         @db.VarChar(25)
  bairro             String?         @db.VarChar(100)
  complemento        String?         @db.VarChar(100)
  estado             String?         @db.VarChar(2)
  loteAtual          String?         @db.VarChar(50)
  loteNovo           String?         @db.VarChar(50)
  quadraAtual        String?         @db.VarChar(50)
  quadraNova         String?         @db.VarChar(50)
  totalRendaFamiliar String?
  // se casado ou união estável
  nomeConjuge        String?         @db.VarChar(255)
  rgConjuge          String?         @unique @db.VarChar(12)
  cpfConjuge         String?         @unique @db.VarChar(14)
  profissaoConjuge   String?         @db.VarChar(100)
  telefoneConjuge    String?         @db.VarChar(15)
  emailConjuge       String?         @unique
  // status
  status             Boolean
  // administrador criador
  createdById        String          @db.VarChar(255)
  // relacionamentos
  tarefas            Task[]          @relation("TaskUsers")
  projetosEmp        Project[]       @relation("ProjectEmployees")
  projetosCli        Project[]       @relation("ProjectClients")
  contributions      Contributions[] @relation("UserContributions")
  Financial          Financial[]     @relation("FinancialClients")

  @@index([email])
  @@index([cpf])
  @@index([rg])
  @@index([cpfConjuge])
  @@index([rgConjuge])
  @@index([emailConjuge])
  @@map("user")
}

model Task {
  id        String   @id @unique @default(uuid())
  createdIn DateTime @default(now())
  updated   DateTime @default(now()) @updatedAt

  descricao  String   @db.VarChar(255)
  data       DateTime
  prioridade String   @db.VarChar(20)
  status     String   @db.VarChar(20)

  funcionarios User[]         @relation("TaskUsers")
  contribution Contributions? @relation("ContributionTasks", fields: [contributionId], references: [id], onDelete: Cascade)
  projeto      Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  projectId      String?
  contributionId String?

  @@map("task")
}

model Project {
  id        String   @id @unique @default(uuid())
  createdIn DateTime @default(now())
  updated   DateTime @default(now()) @updatedAt

  nome           String @db.VarChar(100)
  descricao      String @db.VarChar(255)
  valorTotal     String @db.VarChar(255)
  valorAcumulado String @db.VarChar(255)
  dataInicio     String @db.VarChar(255)
  status         String @db.VarChar(16)

  funcionarios  User[]          @relation("ProjectEmployees")
  clientes      User[]          @relation("ProjectClients")
  contributions Contributions[] @relation("ProjectContributions")
  Task          Task[]

  @@map("project")
}

model Contributions {
  id        String   @id @unique @default(uuid())
  createdIn DateTime @default(now())
  updated   DateTime @default(now()) @updatedAt

  valor        String @db.VarChar(100)
  entrada      String @db.VarChar(100)
  parcelas     String @db.VarChar(2)
  valorParcela String @db.VarChar(100)

  financials Financial[] @relation("ContributionFinancials")
  tasks      Task[]      @relation("ContributionTasks")
  user       User?       @relation("UserContributions", fields: [userId], references: [id], onDelete: Cascade)
  project    Project?    @relation("ProjectContributions", fields: [projectId], references: [id], onDelete: Cascade)

  userId    String?
  projectId String?

  @@map("contribution")
}

model Financial {
  id        String   @id @unique @default(uuid())
  createdIn DateTime @default(now())
  updated   DateTime @default(now()) @updatedAt

  nome       String @db.VarChar(100)
  tipo       String @db.VarChar(7)
  valor      String @db.VarChar(100)
  status     String @db.VarChar(20)
  pagamento  String @db.VarChar(100)
  vencimento String? @db.VarChar(2)

  // Relacionamentos
  contribution Contributions? @relation("ContributionFinancials", fields: [contributionId], references: [id], onDelete: Cascade)
  cliente      User?          @relation("FinancialClients", fields: [clienteId], references: [id], onDelete: Cascade)

  contributionId String?
  clienteId      String? @db.VarChar(255)

  @@map("financial")
}
